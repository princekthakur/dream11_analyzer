import streamlit as st
import pandas as pd
import numpy as np
from itertools import combinations

# ----------------------------
# 1. SCORING LOGIC (FIXED SYNTAX)
# ----------------------------
def calculate_points(player):
    """Calculate Dream11 points based on stats"""
    if player["role"] in ["BAT", "WK"]:
        # Batting points (runs + strike rate bonus)
        runs_points = player["last5_avg"] * 1.0  # 1 pt per run (avg proxy)
        sr_bonus = max(0, (player["sr"] - 120) * 0.1)  # Fixed: Added closing )
        return runs_points + sr_bonus + 10  # Base 10 pts
    
    elif player["role"] in ["BOWL", "AR"]:
        # Bowling points (wickets + economy bonus)
        wicket_points = player["last5_wickets"] * 25  # 25 pts per wicket
        economy_bonus = (8.0 - player["economy"]) * 5  # Bonus for economy < 8
        return wicket_points + max(0, economy_bonus) + 10  # Base 10 pts

# ----------------------------
# 2. OPTIMIZATION ENGINE 
# ----------------------------
def generate_teams(players, pitch_type="neutral"):
    valid_teams = []
    player_list = list(players.values())
    
    # Apply pitch effects
    pitch_boost = {
        "batting": {"BAT": 1.2, "WK": 1.1, "AR": 1.1},
        "bowling": {"BOWL": 1.3, "AR": 1.2},
        "neutral": {}
    }
    
    for player in player_list:
        player["predicted"] = calculate_points(player)
        for role, boost in pitch_boost.get(pitch_type, {}).items():
            if player["role"] == role:
                player["predicted"] *= boost
    
    # Generate team combinations
    for team in combinations(player_list, 11):
        credits = sum(p["credits"] for p in team)
        roles = {"BAT":0, "BOWL":0, "AR":0, "WK":0}
        
        for p in team:
            roles[p["role"]] += 1
        
        # Validate team composition
        if (credits <= 100 and roles["WK"] >= 1 and
            3 <= roles["BAT"] <= 5 and
            3 <= roles["BOWL"] <= 5 and
            1 <= roles["AR"] <= 3):
            
            # Add captain/VC bonuses
            sorted_team = sorted(team, key=lambda x: x["predicted"], reverse=True)
            total = sum(p["predicted"] for p in team)
            total += sorted_team[0]["predicted"] * 0.5  # Captain
            total += sorted_team[1]["predicted"] * 0.25  # Vice-captain
            
            valid_teams.append({
                "players": sorted_team,
                "total": round(total),
                "credits": credits,
                "captain": sorted_team[0]["name"],
                "vc": sorted_team[1]["name"]
            })
    
    return sorted(valid_teams, key=lambda x: x["total"], reverse=True)[:3]

# ----------------------------
# 3. STREAMLIT UI
# ----------------------------
def main():
    st.set_page_config(layout="wide")
    st.title("🏏 Dream11 Team Predictor")
    
    # Sample data
    players = {
        "Virat Kohli": {
            "name": "Virat Kohli", "team": "RCB", "role": "BAT",
            "credits": 10.5, "last5_avg": 52, "sr": 145
        },
        "Jasprit Bumrah": {
            "name": "Jasprit Bumrah", "team": "MI", "role": "BOWL",
            "credits": 9.5, "last5_wickets": 8, "economy": 6.5
        }
    }
    
    # Add more sample players to reach 11+
    for i in range(9):
        players[f"Player {i+3}"] = {
            "name": f"Player {i+3}",
            "team": "SRH" if i%2 else "GT",
            "role": np.random.choice(["BAT", "BOWL", "AR", "WK"]),
            "credits": round(np.random.uniform(8, 10), 1),
            "last5_avg": np.random.randint(20, 60),
            "sr": np.random.randint(110, 180),
            "last5_wickets": np.random.randint(0, 10),
            "economy": round(np.random.uniform(6, 9), 1)
        }
    
    # UI Controls
    pitch = st.selectbox("Pitch Condition", ["neutral", "batting", "bowling"])
    
    if st.button("Generate Optimal Teams"):
        if len(players) < 11:
            st.error("Need at least 11 players!")
        else:
            with st.spinner("Calculating..."):
                teams = generate_teams(players, pitch)
                
                for i, team in enumerate(teams, 1):
                    with st.expander(f"Team #{i} | Predicted: {team['total']} pts | Credits: {team['credits']}/100"):
                        st.markdown(f"**Captain:** {team['captain']} (+50%) | **VC:** {team['vc']} (+25%)")
                        
                        df = pd.DataFrame([{
                            "Player": p["name"],
                            "Role": p["role"],
                            "Team": p["team"],
                            "Credits": p["credits"],
                            "Predicted": round(p["predicted"], 1)
                        } for p in team["players"]])
                        
                        st.dataframe(
                            df.sort_values("Predicted", ascending=False),
                            hide_index=True,
                            use_container_width=True
                        )

if __name__ == "__main__":
    main()
